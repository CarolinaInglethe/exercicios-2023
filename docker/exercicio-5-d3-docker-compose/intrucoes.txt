Chamamos o ato de executar todos os servi√ßos do Compose de subir. Para subir todos os servi√ßos, utilizamos o comando docker-compose up no terminal.
‚ö†Ô∏è Lembre-se que o arquivo docker-compose.yaml deve estar na mesma pasta da execu√ß√£o deste comando.

docker-compose up -d

A flag -d serve para executarmos todos os servi√ßos no modo segundo plano. Sem esta flag, os logs dos tr√™s servi√ßos aparecem no console simultaneamente, dificultando a leitura. Por√©m, n√≥s podemos ler os logs de cada um dos servi√ßos posteriormente, usando o comando docker-compose logs <nome-do-servi√ßo>.

  -- Reconstruindo a Imagem Docker -- 

√â comum fazer v√°rias altera√ß√µes em nosso c√≥digo durante a fase de desenvolvimento. Algumas dessas altera√ß√µes nos obrigam a reconstruir a Imagem Docker, ou seja, precisamos for√ßar a execu√ß√£o do docker build novamente. 

Por exemplo uma altera√ß√£o no Dockerfile mudando entrypoint, 

Para isso, utilizamos a flag --build, junto com o comando docker-compose up 

docker-compose up -d --build 

DESCENDO TODOS SERVI√áOS :
docker-compose down 

SUBINDO SERVI√áOS ESPECIFICOS:
ex : docker-compose up backend


ver os logs de nossos servi√ßos de maneira semelhante como fazemos unitariamente com os containers
 docker-compose logs <nome-do-servi√ßo>



 -- VOLUMES

 Nesta chave, especificamos para o Compose que ele deve criar um volume virtual com o nome dados-do-banco. Por√©m, ainda precisamos mapear este volume para dentro de algum servi√ßo!

 Isso √© feito pela nova chave volumes que est√° dentro do servi√ßo database! Voc√™ pode perceber que esta chave √© uma lista com um item e recebeu os dados no seguinte formato: <nome-do-volume>:<caminho-no-container-para-montar>. Ou seja: no servi√ßo database, o caminho /data/db ser√° persistido, mesmo se a gente descer e subir este servi√ßo novamente! ü§©


 rodando : sudo docker-compose up -d 
 Ele cria pasta log , por conta dos volumes indicados no arquivo docker-compose.yaml